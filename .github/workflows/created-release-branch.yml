name: Created release branch

# only create new "release" branch
on:
  push:
    branches:
      - 'release'
  pull_request:
    branches:
      - 'release'
    types:
      - closed

jobs:
  create_draft_pr:
    if: github.event.created
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          ref: ${{ github.event.before }}
      - name: Create draft PR
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const pr = await github.pulls.create({
              owner: context.repo.owner,
              repo: context.repo.repo,
              title: 'Merge release branch to production',
              head: 'release',
              base: 'production',
              draft: true
            });
            console.log(pr.data.html_url);
  add_comment:
    if: github.event.pull_request.merged
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      - name: Add comment
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const pr = await github.pulls.list({
              owner: context.repo.owner,
              repo: context.repo.repo,
              state: 'open',
              base: 'production',
              head: 'release',
              sort: 'created',
              direction: 'desc'
              per_page: 1
              page: 1
            }).data[0];
            const mergedPr = await github.pulls.get({
              owner: context.repo.owner,
              repo: context.repo.repo,
              pull_number: 
            }).data;
            const mergedCommits = await github.pulls.listCommits({
              owner: context.repo.owner,
              repo: context.repo.repo,
              pull_number: ${{ github.event.number }}
            }).data;
            const comment = mergedCommits.map(commit => commit.commit.message).join('\n');
            await github.issues.createComment({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: pr.id,
              
              body: comment
            });