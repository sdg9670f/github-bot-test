name: Created release branch

# only create new "release" branch
on:
  push:
    branches:
      - 'release'
  pull_request:
    branches:
      - 'release'
    types:
      - closed

jobs:
  create_draft_pr:
    if: github.event.created
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      - name: Create draft PR
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            // find opend issue with "release" label then close the issue
            let foundIssue = await github.rest.issues.listForRepo({
              owner: context.repo.owner,
              repo: context.repo.repo,
              labels: 'release',
              state: 'open',
              sort: 'created',
              direction: 'desc',
              per_page: 1,
              page: 1
            });
            console.log(foundIssue);
            foundIssue = foundIssue.data[0];
            if (foundIssue) {
              await github.rest.issues.update({
                owner: context.repo.owner,
                repo: context.repo.repo,
                issue_number: foundIssue.number,
                state: 'closed'
              });
            }
            const issue = await github.rest.issues.create({
              owner: context.repo.owner,
              repo: context.repo.repo,
              title: `[Release] ${new Date().toLocaleString('ko-KR', {timeZone: 'Asia/Seoul'})}`,
              labels: ['release']
            });
  add_comment:
    if: github.event.pull_request.merged
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      - name: Add comment
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const issue = await github.rest.issues.listForRepo({
              owner: context.repo.owner,
              repo: context.repo.repo,
              labels: 'release',
              state: 'open',
              sort: 'created',
              direction: 'desc',
              per_page: 1,
              page: 1
            }).data[0];
            // add assignee
            await github.rest.issues.addAssignees({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: issue.id,
              assignees: ['@${{ github.actor }}']
            });
            const mergedPr = await github.rest.pulls.get({
              owner: context.repo.owner,
              repo: context.repo.repo,
              pull_number: ${{ github.event.number }}
            }).data;
            const mergedCommits = await github.rest.pulls.listCommits({
              owner: context.repo.owner,
              repo: context.repo.repo,
              pull_number: ${{ github.event.number }}
            }).data;
            let comments = [];
            comments.push(`Merged PR: [${mergedPr.title}](${mergedPr.html_url})`);
            comments.push(`Merged branch: ${mergedPr.base.ref}`);
            comments = comments.concat(mergedCommits.map(commit => commit.commit.message));
            const mergedComment = comments.join('\n');
            await github.rest.issues.createComment({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: issue.id,
              body: comment
            });