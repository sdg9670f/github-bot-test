name: Release branch

on:
  push:
    branches:
      - 'release'
  pull_request:
    branches:
      - 'release'
    types:
      - closed

jobs:
  create_issue_for_release:
    if: github.event.created || github.event.forced
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      - name: Create issue
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const foundIssue = (await github.rest.issues.listForRepo({
              owner: context.repo.owner,
              repo: context.repo.repo,
              labels: ['release', 'issue'],
              state: 'open',
              sort: 'created',
              direction: 'desc',
              per_page: 1,
              page: 1
            })).data[0];
            if (foundIssue) {
              await github.rest.issues.update({
                owner: context.repo.owner,
                repo: context.repo.repo,
                issue_number: foundIssue.number,
                state: 'closed'
              });
            }
            const foundPr = (await github.rest.pulls.list({
              owner: context.repo.owner,
              repo: context.repo.repo,
              labels: ['release', 'pr'],
              head: 'release',
              base: 'production',
              state: 'open',
              sort: 'created',
              direction: 'desc',
              per_page: 1,
              page: 1
            })).data[0];
            if (foundPr) {
              await github.rest.pulls.update({
                owner: context.repo.owner,
                repo: context.repo.repo,
                pull_number: foundPr.number,
                state: 'closed'
              });
            }
            const issue = await github.rest.issues.create({
              owner: context.repo.owner,
              repo: context.repo.repo,
              title: `[Release] ${new Date().toLocaleString('ko-KR', {timeZone: 'Asia/Seoul'})}`,
              labels: ['release', 'issue']
            });
  add_comment_and_create_pr_into_production:
    if: github.event.pull_request.merged
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      - name: Add comment and Create pr to merge into production from release
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const issue = (await github.rest.issues.listForRepo({
              owner: context.repo.owner,
              repo: context.repo.repo,
              labels: ['release', 'issue'],
              state: 'open',
              sort: 'created',
              direction: 'desc',
              per_page: 1,
              page: 1
            })).data[0];
            if (!issue) {
              return;
            }
            const mergedPr = (await github.rest.pulls.get({
              owner: context.repo.owner,
              repo: context.repo.repo,
              pull_number: ${{ github.event.number }}
            })).data;
            const commits = (await github.rest.pulls.listCommits({
              owner: context.repo.owner,
              repo: context.repo.repo,
              pull_number: ${{ github.event.number }}
            })).data;
            let pr = (await github.rest.pulls.list({
              owner: context.repo.owner,
              repo: context.repo.repo,
              labels: ['release', 'pr'],
              head: 'release',
              base: 'production',
              state: 'open',
              sort: 'created',
              direction: 'desc',
              per_page: 1,
              page: 1
            })).data[0];
            if (!pr) {
              pr = (await github.rest.pulls.create({
                owner: context.repo.owner,
                repo: context.repo.repo,
                title: `[Release] Merge into production ${new Date().toLocaleString('ko-KR', {timeZone: 'Asia/Seoul'})}`,
                head: 'release',
                base: 'production',
                draft: true
              })).data;
              await github.rest.issues.addLabels({
                owner: context.repo.owner,
                repo: context.repo.repo,
                issue_number: pr.number,
                labels: ['release', 'pr']
              });
              await github.rest.issues.createComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                issue_number: pr.number,
                body: `related to #${issue.number}`
              });
              await github.rest.issues.createComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                issue_number: issue.number,
                body: `related to #${pr.number}`
              });
            }
            await github.rest.issues.addAssignees({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: issue.number,
              assignees: ['${{ github.actor }}']
            });
            await github.rest.issues.addAssignees({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: pr.number,
              assignees: ['${{ github.actor }}']
            });
            let comments = [];
            comments.push(`Merged PR: [${mergedPr.title}](${mergedPr.html_url}) #${mergedPr.number}`);
            comments.push(`- Branch: [${mergedPr.head.ref}](${mergedPr.head.repo.html_url}/tree/${mergedPr.head.ref})`);
            comments.push(`- Assingees: ${mergedPr.assignees.map(assignee => `@${assignee.login}`).join(', ')}`);
            comments.push('- Commit logs');
            comments = comments.concat(commits.map(commit => `> - [${commit.commit.message}](${commit.html_url})`));
            const mergedComment = comments.join('\n');
            await github.rest.issues.createComment({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: issue.number,
              body: mergedComment
            });
            await github.rest.issues.createComment({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: pr.number,
              body: mergedComment
            });